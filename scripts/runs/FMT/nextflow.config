// -*- mode:groovy -*-
// vim:ft=groovy

params.conda_dir = "/rprojectnb/visant/dkishore/envs"
params.project = "visant"
params.naive_bayes_memory = '32 GB'
params.errorStrategy = "terminate"

// Process specific configuration
includeConfig './nf_micone/configs/process.config'
includeConfig './nf_micone/configs/profiles.config'

// Module specific configuration
includeConfig './nf_micone/configs/sequence_processing.config'
includeConfig './nf_micone/configs/denoise_cluster.config'
includeConfig './nf_micone/configs/tax_assignment.config'
includeConfig './nf_micone/configs/otu_processing.config'
includeConfig './nf_micone/configs/network_inference.config'

// User configuration
// Refer: documentation for details

process {
    withLabel:'mldm' {
        errorStrategy = 'ignore'
    }
    withLabel:'harmonies' {
        errorStrategy = 'ignore'
    }
    withLabel:'cozine' {
        errorStrategy = 'ignore'
    }
    withLabel:'spring' {
        errorStrategy = 'ignore'
    }
    withLabel:'spieceasi' {
        errorStrategy = 'ignore'
    }
    withLabel:'flashweave' {
        errorStrategy = 'ignore'
    }
    withLabel:'sparcc' {
        errorStrategy = 'ignore'
    }
    withLabel:'propr' {
        errorStrategy = 'ignore'
    }
    withLabel:'spearman' {
        errorStrategy = 'ignore'
    }
    withLabel:'pearson' {
        errorStrategy = 'ignore'
    }
}

params {
    input = "samplesheet.csv"
    output_dir = "outputs"
    paired_end = true
    sequence_processing {
        demultiplexing {
            'demultiplexing_illumina_paired' {
                rev_comp_mapping_barcodes = true
                barcode_column = "barcode"
            }
        }
        trimming {
            'trimming_paired' {
                ncpus = 8
            }
        }
    }
    denoise_cluster {
        otu_assignment {
            selection = ['closed_reference', 'open_reference', 'de_novo', 'dada2', 'deblur']
        }
        chimera_checking {
            selection = ['remove_bimera', 'uchime']
        }
    }
    tax_assignment {
        assign {
            selection = ['naive_bayes', 'blast']
            'naive_bayes' {
                classifier = [
                    "${PWD}/nf_micone/data/classifiers/gg_13_8_99.qza",
                    "${PWD}/nf_micone/data/classifiers/silva_138_99.qza"
                ]
                ncpus = 2
            }
        }
    }
    otu_processing {
        transform {
            'fork' {
                column = "experimental_group"
            }
            'group' {
                tax_levels = ['Family', 'Genus', 'Species']
            }
        }
    }
    network_inference {
        bootstrap{
            'resample' {
                bootstraps = 1000
            }
            'pvalue' {
                slim = true
            }
        }
        correlation {
            selection = ['sparcc', 'pearson', 'spearman', 'propr']
            'sparcc' { ncpus = 4 }
            'pearson' { ncpus = 4 }
            'spearman' { ncpus = 4 }
            'propr' { ncpus = 4 }
        }
        direct {
            selection = ['spieceasi', 'flashweave', 'mldm', 'cozine', 'harmonies', 'spring']
        }
        network {
            'make_network_with_pvalue' {
                metadata_file = "${PWD}/metadata.json"
            }
            'make_network_without_pvalue' {
                metadata_file = "${PWD}/metadata.json"
            }
            'create_consensus' {
                pvalue_filter = "false"
                interaction_filter = "false"
            }
        }
    }
}

executor {
    $local {
        cpus = 36
        memory = '1 TB'
    }
}

